<?
class revision_requisicion{

	// Propiedades

	var $id;
	var $id_unidad_ejecutora;
	var $id_usuario;
	var $motivo;
	var $unidad_ejecutora;
	var $ano;
	var $fecha;
	var $fecha_aprobacion;
	var $status;
	var $total;
	var $nom_status;
	
	/*****************************
       Objeto Relacion Partidas
	*****************************/
	var $relacion; // almacena un array de objetos de relaciones de partidas
	
	// Propiedades utilizadas por el objeto con relaciones de partidas
	var $idParCat;
	var $id_categoria_programatica;
	var $id_partida_presupuestaria;
	var $categoria_programatica;
	var $partida_presupuestaria;
	var $cantidad;
	var $nombre_p;
	var $id_producto;
	var $costo;
	var $RelacionPARCAT;
	

	function get($conn, $id, $escEnEje=''){
		$q = "SELECT puser.requisiciones.*, puser.unidades_ejecutoras.descripcion AS unidad_ejecutora ";
		$q.= "FROM puser.requisiciones ";
		$q.= "INNER JOIN puser.unidades_ejecutoras ON (requisiciones.id_unidad_ejecutora = unidades_ejecutoras.id) ";
		$q.= "WHERE requisiciones.id='$id' ";
		//die($q);
		$r = $conn->Execute($q);
		if(!$r->EOF){
			$this->id = $r->fields['id'];
			$this->id_unidad_ejecutora = $r->fields['id_unidad_ejecutora'];
			$this->id_usuario = $r->fields['id_usuario'];
			$this->motivo = $r->fields['motivo'];
			$this->unidad_ejecutora = $r->fields['unidad_ejecutora'];
			$this->fecha = $r->fields['fecha_r'];
			$this->fecha_aprobacion = $r->fields['fecha_aprobacion'];
			$this->getRelacionPartidas($conn, $id, $escEnEje);
			$this->status= $r->fields['status'];
			switch ($r->fields['status']){
			case '01':
				$this->nom_status = 'Pendiente';
				break;
			case '02':
				$this->nom_status = 'Aprobada';
				break;
			case '03':
				$this->nom_status = 'Anulada';
				break;
			case '04':
				$this->nom_status = 'Recibida por Compras';
				break;
			case '05':
				$this->nom_status = 'Requisicion General';
				break;
			case '06':
				$this->nom_status = 'Solicitud de Cotizacion';
				break;
			case '07':
				$this->nom_status = 'Cotizada';
				break;
			case '08':
				$this->nom_status = 'Orden de Compra';
				break;
			
			}
			$this->ano = $r->fields['ano'];
			return true;
		}else
			return false;
	}

function buscar($conn, 
	$id_ue, 
	$fecha_desde, 
	$fecha_hasta,
	$nrorequi, 
	$orden="id",
	$escEnEje=''){
		if(empty($id_ue)
			&& empty($fecha_desde)
			&& empty($fecha_hasta)
			&& empty($nrorequi)
			)
			return false;
		$q = "SELECT * FROM puser.requisiciones ";
		$q.= "WHERE  1=1 ";
		$q.= !empty($fecha_desde) ? "AND fecha_r >='".$fecha_desde."' ": "";
		$q.= !empty($fecha_hasta) ? "AND fecha_r <='".$fecha_hasta."' ": "";
		$q.= !empty($id_ue) ? "AND id_unidad_ejecutora = '$id_ue'  ":"";
		$q.= !empty($nrorequi) ? "AND id = '$nrorequi' ":"";
		$q.= "AND status IN ('02','04','07') ";
		$q.= "ORDER BY $orden ";
		if(!$r = $conn->Execute($q))
			return false;
		$collection=array();
		while(!$r->EOF){
			$ue = new requisiciones;
			$ue->get($conn, $r->fields['id'], $escEnEje, '01');
			$coleccion[] = $ue;
			$r->movenext();
		}
		return $coleccion;
	}
	
	function getRelacionPartidas($conn, $id, $escEnEjec){
		$q = "SELECT puser.relacion_requisiciones.*, puser.partidas_presupuestarias.descripcion AS partida_presupuestaria,  ";
		$q.= "puser.categorias_programaticas.descripcion AS categoria_programatica, ";
		$q.= "puser.productos.descripcion AS nombre_p, puser.productos.ultimo_costo AS costo ";
		$q.= "FROM puser.relacion_requisiciones  ";
		$q.= "INNER JOIN puser.partidas_presupuestarias ON (relacion_requisiciones.id_partida = partidas_presupuestarias.id) ";
		$q.= "INNER JOIN puser.categorias_programaticas ON (relacion_requisiciones.id_categoria = categorias_programaticas.id) ";
		$q.= "INNER JOIN puser.productos ON (relacion_requisiciones.id_producto = productos.id) ";
		$q.= "WHERE relacion_requisiciones.id_requisicion='$id' ";
		$q.= "AND categorias_programaticas.id_escenario = '$escEnEjec' ";
		$q.= "AND partidas_presupuestarias.id_escenario = '$escEnEjec' ";
		//die($q);
		$r = $conn->Execute($q);
		while(!$r->EOF){
			$ue = new movimientos_presupuestarios;
			$ue->nrodoc = $r->fields['id_requisicion'];
			$ue->id_partida	= $r->fields['id_partida'];
			$ue->id_categoria = $r->fields['id_categoria'];
			$ue->partida_presupuestaria	= $r->fields['partida_presupuestaria'];
			$ue->categoria_programatica = $r->fields['categoria_programatica'];
			$ue->cantidad = $r->fields['cantidad'];
			$ue->costo = $r->fields['costo'];
			$ue->id_producto = $r->fields['id_producto'];
			$ue->nombre_p = $r->fields['nombre_p'];
			$ue->cantidad_despachada = $r->fields['cantidad_despachada'];
			$coleccion[] = $ue;
			$r->movenext();
			
		}
		$this->relacionPARCAT = new Services_JSON();
		$this->relacionPARCAT = is_array($coleccion) ? $this->relacionPARCAT->encode($coleccion) : false;
		return $coleccion;
	}
	
	function set_despacho($conn, $id, $cantd, $id_producto ){
		$q= "UPDATE puser.relacion_requisiciones SET cantidad_despachada = $cantd WHERE id_requisicion= $id AND id_producto = $id_producto";
		if($r= $conn->Execute($q)){
			$this->msj = REG_SET_OK;
		} else {
			$this->msj = ERROR_SET;
		}
	}
	
	function get_all($conn, $escEnEje,$orden="id"){
		$q = "SELECT * FROM puser.requisiciones ";
		$q.= "ORDER BY $orden ";
		$r = $conn->Execute($q);
		$collection=array();
		while(!$r->EOF){
			$ue = new requisiciones;
			$ue->get($conn, $r->fields['id'], $escEnEje);
			$coleccion[] = $ue;
			$r->movenext();
		}
		$this->total = $r->RecordCount();
		return $coleccion;
	}	
	
	function set_status($conn, $status, $id){
		$q= "UPDATE puser.requisiciones SET status = '$status' WHERE id = '$id'";
		//die($q);
		if($r = $conn->Execute($q)){
			$this->msj = REG_SET_OK;
		} else {
			$this->msj = ERROR_SET;
			}
	}
	
	//Esta FUNCION DEVUELVE LOS PROVEEDORES QUE PUEDEN COTIZAR PARA ESTOS PRODUCTO
	function busca_proveedores_cotizacion($conn, $id_productos){
		$q="SELECT DISTINCT ON ";
		$q.="(puser.proveedores.id) puser.proveedores.id, ";
		$q.="puser.proveedores.nombre, puser.productos.id AS idp ";
		$q.="FROM puser.productos ";
		$q.="Inner Join puser.tipo_producto ON puser.productos.id_tipo_producto = puser.tipo_producto.id ";
		$q.="Inner Join puser.grupos_proveedores ON puser.tipo_producto.id_grupo_proveedor = puser.grupos_proveedores.id ";
		$q.="Inner Join puser.relacion_provee_grupo_provee ON puser.grupos_proveedores.id = puser.relacion_provee_grupo_provee.id_grupo_provee ";
		$q.="Inner Join puser.proveedores ON puser.relacion_provee_grupo_provee.id_provee = puser.proveedores.id ";
		$q.="WHERE puser.productos.id IN ($id_productos) ";
		//ESTA ULTIMA LINEA SE UTILIZA CUANDO SOLO PUEDEN COTIZAR LOS PROVEEDORES QUE ESTEN EN ESTATUS ACTIVO 28/02
		//$q.="WHERE puser.productos.id IN ($id_productos) AND puser.proveedores.status = 'A'";
		//die($q);
		$r= $conn->Execute($q);
		while(!$r->EOF){
			$pc = new revision_requisicion;
			$pc->id = $r->fields['id'];
			$pc->nombre_proveedor = $r->fields['nombre'];
			$coleccion[] = $pc;
			$r->movenext();
		}
		return $coleccion;
	}
	
	//GUARDA LOS PROVEEDORES A LOS QUE SE LES ENVIA LA SOLICITUD DE COTIZACION
	function guardaProveedoresParaCotizacion($conn, $id_requisicion, $id_proveedores){
	$sql="SELECT id_producto AS producto FROM puser.relacion_gbl_requisicion WHERE id_gbl_requisicion = '$id_requisicion'";
	$row= $conn->Execute($sql);
	  $q="DELETE FROM puser.proveedores_requisicion WHERE id_requisicion = '$id_requisicion'";
	  $aux= $conn->Execute($q);	
	  if(is_array($id_proveedores)){
		foreach ($id_proveedores as $idp){
			while(!$row->EOF){
				$id_producto = $row->fields['producto'];
				$q="INSERT INTO puser.proveedores_requisicion (id_requisicion, id_proveedor, id_producto, costo) ";
				$q.="VALUES ('$id_requisicion', $idp, '$id_producto', 0)";
				//echo $q."<br>";
				$r= $conn->Execute($q);
				$row->movenext();
			}
			$row->MoveFirst();
			
		}
		$sql="UPDATE puser.gbl_requisicion SET status = '06' WHERE id = '$id_requisicion'";
		$row= $conn->Execute($sql);
	  }
	}			 
		
	function getProveedoresCotizacion($conn, $id_requisicion){
		$q="SELECT ";
		$q.="puser.proveedores_requisicion.id_requisicion ,";
		$q.="puser.productos.descripcion, ";
		$q.="puser.relacion_requisiciones.cantidad, ";
		$q.="puser.proveedores.nombre, ";
		$q.="puser.proveedores.rif ";
		$q.="FROM puser.proveedores_requisicion ";
		$q.="Inner Join puser.relacion_requisiciones ON puser.proveedores_requisicion.id_requisicion = puser.relacion_requisiciones.id_requisicion ";
		$q.="Inner Join puser.productos ON puser.relacion_requisiciones.id_producto = puser.productos.id ";
		$q.="Inner Join puser.proveedores ON puser.proveedores_requisicion.id_proveedor = puser.proveedores.id ";
		$q.="WHERE puser.proveedores_requisicion.id_requisicion =  '$id_requisicion'";
		$r= $conn->Execute($q);
		while(!$r->EOF){
		}	
	}
	
	//ESTA FUNCION DEVUELVE LOS ID DE LOS PRODUCTOS EN UNA CADENA SEPARADA POR COMAS PARA SER UTILIZADA EN LA FUNCION busca_proveedores_cotizacion
	function buscaProductos($conn, $id_rg){
		$q = "SELECT id_producto FROM puser.relacion_gbl_requisicion a ";
		$q.= "INNER JOIN puser.gbl_requisicion b ON (a.id_gbl_requisicion = b.id) ";
		$q.= "WHERE b.id = '$id_rg'";
		//echo $q."<br>";
		$r = $conn->Execute($q);
		$max = $r->RecordCount();
		$i = 1;
		$idp = '';
		while(!$r->EOF){
			if($i!=$max)
				$idp.= "'".$r->fields['id_producto']."',";
			else
				$idp.= "'".$r->fields['id_producto']."'";
			$r->movenext();
			$i++;
		}
		
		//die($idp);
		return $idp;
	}
	
	//ESTA FUNCION PERMITE CAMBIAR EL STATUS EN LA TABLA DE REQUISICIONES CUANDO YA HA PASADO A LA TABLA DE REQUISICIONES GLOBALES
	//PARA QUE EN LAS PANTALLAS DE REQUISICIONES Y RECIBIR REQUISICIONES SE TENGA EL STATUS REAL DE LA REQUISICION
	function set_status_requisicion($conn, $status, $id){
		
		$sql = "SELECT id FROM puser.requisiciones WHERE nroreqgbl = '$id' ";
		$row = $conn->Execute($sql);
		while(!$r->EOF){
			$q= "UPDATE puser.requisiciones SET status = '$status' WHERE id = '".$row->fields['id']."'";
			//die($q);
			$r = $conn->Execute($q);
			$row->movenext();
		}
	}
	

}

?>